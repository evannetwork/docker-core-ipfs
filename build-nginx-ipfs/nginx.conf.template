events {
  worker_connections  10240;
}

http {

    sendfile        on;
    #tcp_nopush     on;

    client_max_body_size 100m;
    client_body_buffer_size 100m;
    # based off html5-boilerplate
    gzip on;
    gzip_comp_level    5;
    gzip_min_length    256;
    gzip_proxied       any;
    gzip_vary          on;
    gzip_types
      application/atom+xml
      application/javascript
      application/x-javascript
      application/json
      application/ld+json
      application/manifest+json
      application/rss+xml
      application/vnd.geo+json
      application/vnd.ms-fontobject
      application/x-font-ttf
      application/x-web-app-manifest+json
      application/xhtml+xml
      application/xml
      font/opentype
      image/bmp
      image/svg+xml
      image/x-icon
      image/jpeg
      image/png
      text/cache-manifest
      text/css
      text/plain
      text/vcard
      text/vnd.rim.location.xloc
      text/vtt
      text/x-component
      text/x-cross-domain-policy;
    # text/html is always compressed by gzip module

    upstream ipfs {
        server 172.16.0.2:8080;
    }

    upstream ipfs_api {
        server 172.16.0.2:5001;
    }

    upstream ipfs_cluster_api {
        server 172.16.0.3:9094;
    }

    lua_package_path "/usr/share/lua/5.1/?.lua;;";
    lua_shared_dict redis_connections 32k;
    server {
        listen 80;
        server_name _;
        # redirects both www and non-www to https
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl default_server;
        ssl_certificate /ssl/${SSL_DOMAIN}.chained.crt;
        ssl_certificate_key /ssl/${SSL_DOMAIN}.key;

        location /api {
            # allow specific ipfs endpoints
            location ~ .(\/cat)$ {
                allow all;
                access_by_lua_file /etc/nginx/ngx_ipfs_blacklist.lua;
                if ($request_method = 'OPTIONS') {
                    # Preflight request
                    add_header 'Access-Control-Allow-Origin' '*';
                    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                    add_header 'Access-Control-Allow-Headers' 'X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                    add_header 'Access-Control-Max-Age' 1728000;
                    add_header 'Content-Type' 'text/plain; charset=utf-8';
                    add_header 'Content-Length' 0;
                    return 204;
                }
                # Pass request to IPFS cluster bridge
                proxy_pass http://ipfs_api;
                proxy_http_version 1.1;
            }

            location ~ .(\/pin\/add)$ {
                if ($request_method = 'OPTIONS') {
                    # Preflight request
                    add_header 'Access-Control-Allow-Origin' '*';
                    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                    add_header 'Access-Control-Allow-Headers' 'X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                    add_header 'Access-Control-Max-Age' 1728000;
                    add_header 'Content-Type' 'text/plain; charset=utf-8';
                    add_header 'Content-Length' 0;
                    return 204;
                }
                set $request_type 'pin';
                set $pin_type 'add';
                more_clear_input_headers Accept-Encoding;
                content_by_lua_file /etc/nginx/ngx_ipfs_add_pin_validator.lua;
            }

            location ~ .(\/pin\/rm)$ {
                if ($request_method = 'OPTIONS') {
                    # Preflight request
                    add_header 'Access-Control-Allow-Origin' '*';
                    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                    add_header 'Access-Control-Allow-Headers' 'X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                    add_header 'Access-Control-Max-Age' 1728000;
                    add_header 'Content-Type' 'text/plain; charset=utf-8';
                    add_header 'Content-Length' 0;
                    return 204;
                }
                set $request_type 'pin';
                set $pin_type 'rm';
                more_clear_input_headers Accept-Encoding;
                content_by_lua_file /etc/nginx/ngx_ipfs_add_pin_validator.lua;
            }

            location ~ .(\/add)$ {
                if ($request_method = 'OPTIONS') {
                    # Preflight request
                    add_header 'Access-Control-Allow-Origin' '*';
                    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                    add_header 'Access-Control-Allow-Headers' 'X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                    add_header 'Access-Control-Max-Age' 1728000;
                    add_header 'Content-Type' 'text/plain; charset=utf-8';
                    add_header 'Content-Length' 0;
                    return 204;
                }
                set $request_type 'add';
                more_clear_input_headers Accept-Encoding;
                content_by_lua_file /etc/nginx/ngx_ipfs_add_pin_validator.lua;
            }

            # deny all others
            location ~ /api/v0/* { deny all; }
        }

        location /ipfs {
            access_by_lua_file /etc/nginx/ngx_ipfs_blacklist.lua;
            proxy_pass http://ipfs;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
        }

        location /ipns {
            access_by_lua_file /etc/nginx/ngx_ipfs_blacklist.lua;
            proxy_pass http://ipfs;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
        }

        location / {
            access_by_lua_file /etc/nginx/ngx_ipfs_blacklist.lua;
            proxy_pass http://ipfs;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
        }

        location /parityproxy {
            internal;
            rewrite    ^/parityproxy/(.*)  /$1  break;
            resolver 8.8.8.8 ipv6=off; #  AWS DNS resolver address is the same in all regions - 172.16.0.23
            proxy_read_timeout 1h;
            proxy_send_timeout 1h;
            proxy_connect_timeout 1h;
            proxy_pass ${CHAIN_ENDPOINT};
            proxy_set_header Content-Type "application/json";
            proxy_set_header Accept-Encoding  "";

        }

        location /ipfsaddproxy/ {
            internal;
            proxy_read_timeout 1h;
            proxy_send_timeout 1h;
            proxy_connect_timeout 1h;
            proxy_pass http://ipfs_api/api/v0/;
            proxy_pass_request_headers on;
        }

        location /ipfscatproxy {
            internal;
            rewrite    ^/ipfscatproxy/(.*)  /api/v0/$1  break;
            proxy_read_timeout 1h;
            proxy_send_timeout 1h;
            proxy_connect_timeout 1h;
            proxy_pass http://ipfs_api;
            proxy_pass_request_headers off;
        }

        location /paymentProxy/ {
            internal;
            proxy_read_timeout 1h;
            proxy_send_timeout 1h;
            proxy_connect_timeout 1h;
            proxy_pass ${PAYMENTS_ENDPOINT}/api/smart-agents/ipfs-payments/;
            proxy_pass_request_headers on;
        }

        location /clusterapi/ {
            internal;
            proxy_read_timeout 120s;
            proxy_send_timeout 120s;
            proxy_connect_timeout 120s;
            proxy_pass http://ipfs_cluster_api/;
            proxy_pass_request_headers off;
        }

    }
}