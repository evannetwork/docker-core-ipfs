events {
  worker_connections  10240;
}

http {

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    client_max_body_size 10m;
    # based off html5-boilerplate
    gzip on;
    gzip_comp_level    5;
    gzip_min_length    256;
    gzip_proxied       any;
    gzip_vary          on;
    gzip_types
      application/atom+xml
      application/javascript
      application/x-javascript
      application/json
      application/ld+json
      application/manifest+json
      application/rss+xml
      application/vnd.geo+json
      application/vnd.ms-fontobject
      application/x-font-ttf
      application/x-web-app-manifest+json
      application/xhtml+xml
      application/xml
      font/opentype
      image/bmp
      image/svg+xml
      image/x-icon
      image/jpeg
      image/png
      text/cache-manifest
      text/css
      text/plain
      text/vcard
      text/vnd.rim.location.xloc
      text/vtt
      text/x-component
      text/x-cross-domain-policy;
    # text/html is always compressed by gzip module

    upstream websocket {
        server 172.16.0.2:8081;
    }

    upstream ipfs {
        server 172.16.0.2:8080;
    }

    upstream ipfs_api {
        server 172.16.0.2:5001;
    }

    upstream ipfs_cluster_api {
        server 172.16.0.3:9094;
    }

    upstream ipfs_cluster_bridge {
        server 172.16.0.3:9095;
    }

    server {
        listen 80;
        server_name _;

        # redirects both www and non-www to https
        return 301 https://$host$request_uri;
    }


    server {
        listen 443 ssl;

        ssl_certificate /ssl/${SSL_DOMAIN}.chained.crt;
        ssl_certificate_key /ssl/${SSL_DOMAIN}.key;

        location /api {
            # allow specific ipfs endpoints
            location ~ .(\/pin\/add|\/add|\/cat)$ {
              allow all; 
              if ($request_method = 'OPTIONS') {
                  # Preflight request
                  add_header 'Access-Control-Allow-Origin' '*';
                  add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                  add_header 'Access-Control-Allow-Headers' 'X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                  add_header 'Access-Control-Max-Age' 1728000;
                  add_header 'Content-Type' 'text/plain; charset=utf-8';
                  add_header 'Content-Length' 0;
                  return 204;
              }

              # Pass request to IPFS cluster bridge
              proxy_pass http://ipfs_cluster_bridge;
              proxy_http_version 1.1;
            }
            # deny all others
            location ~ /api/v0/* { deny all; }
        }


        location /pins {
            if ($request_method = 'OPTIONS') {
                # Preflight request
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            # Pass request to IPFS cluster bridge
            proxy_http_version 1.1;
            proxy_pass http://ipfs_cluster_api;


            # Overwrite IPFS cluster CORS header
            add_header "Access-Control-Allow-Origin" $http_origin always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        }
        location /ipfs {
            proxy_pass http://ipfs;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
        }

        location /ipns {
            proxy_pass http://ipfs;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
        }

        location / {
            proxy_pass http://ipfs;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
        }
    }
}